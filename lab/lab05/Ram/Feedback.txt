shuffle.pl

1. Good job at implementing Fisher-Yates
2. Produces low entropy result
3. +1 for using warning flags and correct shebang
3. Would be better if you could add more comments

shuffle_test.sh

1. Easy to understand implementation
2. The code does not check for entropy of the results produced 
3. Wrong shebang used, shell shebang is used but bash funtionalities were used
4. Would be better if you could add more comments 

Overall Great Job !

++++++++++++++++++++++++++++++++++++++++++++++++
#Original Code: shutffle_test.sh
#!/bin/sh

for len in $(seq 10 100); do
    original=$(seq $len)
    shuffled=$(echo "$original" | ./shuffle.pl)
    resorted=$(echo "$shuffled" | sort -n)
    if [ "$original" != "$resorted" ]; then
        echo -e "\033[1;31mThe elements are not the same!\033[0m"

        echo "Original:"
        echo $(echo "$original" | sed 's/^/    /')
        echo "Shuffled:"
        echo $(echo "$shuffled" | sed 's/^/    /')
        exit 1
    elif [ "$original" == "$shuffled" ]; then
        echo -e "\033[1;33mThe shuffled list is the same as the original list.\033[0m"
    fi
done
++++++++++++++++++++++++++++++++++++++++++++++++
#Revised Code: shuffle_test.sh
#!/bin/bash

for len in $(seq 10 100); do
    original="$(seq $len)"
    shuffled="$(echo "$original" | ./shuffle.pl)"
    resorted="$(echo "$shuffled" | sort -n)"
    if [ "$original" != "$resorted" ]; then
        echo -e "\033[1;31mThe elements are not the same!\033[0m"

        echo "Original:"
        echo "$(echo "$original" | sed 's/^/    /')"
        echo "Shuffled:"
        echo "$(echo "$shuffled" | sed 's/^/    /')"
        exit 1
    elif [ "$original" == "$shuffled" ]; then
        echo -e "\033[1;33mThe shuffled list is the same as the original list.\033[0m"
    fi
done

************************************************
